pub fn hello() -> String {
  // let ðŸ˜ˆðŸ˜ˆðŸ˜ˆðŸ˜ˆðŸ˜ˆðŸ˜ˆðŸ˜ˆðŸ˜ˆ = 1
  // let ä¸­æ–‡ = 3
  // @hhh.hello() |> ignore
  "Hello, world!"
}

test "1" {
  inspect!("test 1", content="test 1")
  println("test 1")
}

// let ðŸ˜ˆðŸ˜ˆðŸ˜ˆðŸ˜ˆðŸ˜ˆðŸ˜ˆðŸ˜ˆðŸ˜ˆ = 1
//   let ä¸­æ–‡ = 3
test "2" {

  // let ðŸ˜ˆðŸ˜ˆðŸ˜ˆðŸ˜ˆðŸ˜ˆðŸ˜ˆðŸ˜ˆðŸ˜ˆ = 1
  // let ä¸­æ–‡ = 3
  // panic()
  println("test 2")
}

// test "d" (it : @test.T) {
//   it.writeln("hello")
//   it.writeln("snapshot")
//   it.writeln("testing")
//   it.snapshot!(filename="001.txt")
// }

test "fail_test" {
  // let a
  fail!("test 3")
}

test "fasdfasd" {
  // println(1 / 0)
  // println("test 3")

  // _recursive(10) |> ignore

  // println(1 / 0)

  // let arr = [1];
  // arr[1] = 2;

  // fail!("test 3")

  // abort("test 3")

  // panic()
}

// fn main {
//   println("main")
// }

test "4" {
  println("test 4")
}

test "5" {
  println("test 5")
}

// fn _recursive(n: Int) -> Int {
//   let _a = 1;
//   _recursive(n)
// }
